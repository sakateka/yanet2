name: Build YANET

on:
  push:
    branches: ["main"]
    paths:
      - "**.h"
      - "**.c"
      - "**/meson.build"
      - "**.go"
      - "go.mod"
      - "go.sum"
      - "Makefile"
  pull_request:
    branches: ["main"]
    paths:
      - "**.h"
      - "**.c"
      - "**/meson.build"
      - "**.go"
      - "go.mod"
      - "go.sum"
      - "Makefile"

jobs:
  build:
    runs-on: ubuntu-24.04    
    env:
      cache_name: build-and-test

    steps:
      - name: update apt (act hack)
        if: ${{ env.ACT }}
        run: |
          apt-get update

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Cache rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: meson clang python3-pyelftools libnuma-dev libpcap-dev git protobuf-compiler
          version: 1.1

      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: hendrikmuhs/ccache-action@v1.2.18
        name: ccache
        with:
          key: ${{ runner.os }}-build-cache

      - name: Cache DPDK build
        uses: actions/cache@v4
        with:
          path: |
            build/subprojects/dpdk
          key: ${{ runner.os }}-dpdk-${{ hashFiles('subprojects/dpdk/**') }}-${{ hashFiles('**/meson.build') }}
          restore-keys: |
            ${{ runner.os }}-dpdk-

      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: false
          check-latest: true
      # https://github.com/actions/setup-go/issues/358
      - name: Get Go environment
        run: |
          echo "cache=$(go env GOCACHE)" >> $GITHUB_ENV
          echo "modcache=$(go env GOMODCACHE)" >> $GITHUB_ENV
      - name: Set up go cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.cache }}
            ${{ env.modcache }}
          key: ${{ env.cache_name }}-${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            ${{ env.cache_name }}-${{ runner.os }}-go-

      - name: Install Go Protobuf Plugins
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Build YANET (dataplane -> modules -> controlplane)
        run: |
          meson setup build -Dbuildtype=debug
          make dataplane cli

      - name: Upload YANET binaries
        uses: actions/upload-artifact@v4
        with:
          name: yanet2-binaries
          path: |
            build/dataplane/yanet-dataplane
            build/controlplane/yanet-controlplane
            target/release/yanet-cli*

      - name: Build and run tests
        run: |
          make test
      - name: Show meson test log
        run:
          grep -v 'Inherited environment' build/meson-logs/testlog.txt

      - uses: cpp-linter/cpp-linter-action@main
        id: linter
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          database: build
          style: file
          # Use .clang-tidy config file.
          tidy-checks: ''
          version: 19
          thread-comments: false
          step-summary: true
          tidy-review: false
          format-review: false
          files-changed-only: true
          ignore: '.github|build'
      - name: Check code style violation
        if: steps.linter.outputs.clang-tidy-checks-failed > 0
        run: exit 1

  functional-tests:
    name: Run Functional Tests
    runs-on: ubuntu-24.04
    timeout-minutes: 150
    needs: build

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        cache: true

    - name: update apt (act hack)
      if: ${{ env.ACT }}
      run: |
        apt-get update
    - uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: qemu-system-x86 qemu-utils genisoimage cloud-image-utils wget curl jq
        version: 1.1

    - name: Configure system for QEMU
      run: |
        # Enable KVM access if available
        if [ -e /dev/kvm ]; then
          echo "KVM is available, configuring KVM access"
          sudo usermod -aG kvm $USER || true
          sudo chmod 666 /dev/kvm || true
        else
          echo "KVM is not available, will use TCG emulation"
        fi
        
        # Configure 9P filesystem support
        sudo modprobe 9p || true
        sudo modprobe 9pnet_virtio || true
        
        # Check QEMU capabilities
        qemu-system-x86_64 --version

    - name: Cache Ubuntu cloud image
      uses: actions/cache@v4
      with:
        path: tests/functional/ubuntu-24.04-minimal-cloudimg-amd64.img
        key: ${{ runner.os }}-ubuntu-image-${{ hashFiles('tests/functional/Makefile') }}
        restore-keys: |
          ${{ runner.os }}-ubuntu-image-

    - name: Cache QEMU image
      uses: actions/cache@v4
      with:
        path: |
          tests/functional/yanet-test.qcow2
          tests/functional/*.iso
        key: ${{ runner.os }}-qemu-image-${{ hashFiles('tests/functional/Makefile') }}-${{ hashFiles('tests/functional/cloud-init-user-data.yaml') }}
        restore-keys: |
          ${{ runner.os }}-qemu-image-

    - name: Download YANET binaries from build job
      uses: actions/download-artifact@v4
      with:
        name: yanet2-binaries
        path: ./

    - name: Display structure of downloaded files
      run: |
        echo "=== Downloaded files structure ==="
        ls -la ./
        echo "=== Build directory ==="
        ls -la build/ || echo "Build directory not found"
        echo "=== Target directory ==="
        ls -la target/ || echo "Target directory not found"
        
        # Ensure directories exist
        mkdir -p build/dataplane build/controlplane
        mkdir -p target/release
        
        # Move binaries to correct locations if they were downloaded to root
        if [ -f "./yanet-dataplane" ]; then
          mv ./yanet-dataplane build/dataplane/
        fi
        if [ -f "./yanet-controlplane" ]; then
          mv ./yanet-controlplane build/controlplane/
        fi
        if [ -f "./yanet-cli-nat64" ]; then
          mv ./yanet-cli-* target/release/
        fi
        
        # Make binaries executable
        chmod +x build/dataplane/yanet-dataplane || true
        chmod +x build/controlplane/yanet-controlplane || true
        chmod +x target/release/yanet-cli* || true
        
    - name: Prepare test environment
      working-directory: tests/functional
      run: |
        make check-deps
        
        echo "=== Starting QEMU VM preparation ==="
        
        # Run with timeout and monitoring
        timeout 7200 make prepare-vm &
        QEMU_PID=$!
        
        # Monitor QEMU progress
        for i in {1..120}; do
          echo "=== QEMU status check $i/120 ==="
          ps aux | grep qemu | grep -v grep || echo "QEMU process not found"
          
          if [ -f qemu_debug.log ]; then
            echo "=== QEMU log size: $(wc -l < qemu_debug.log) lines ==="
            echo "=== Last 10 lines of QEMU log ==="
            tail -10 qemu_debug.log
          fi
          
          sleep 60
          
          # Check if QEMU is still running
          if ! kill -0 $QEMU_PID 2>/dev/null; then
            echo "QEMU process finished"
            break
          fi
        done
        
        # Wait for QEMU to finish
        wait $QEMU_PID
        QEMU_EXIT_CODE=$?
        
        echo "=== QEMU exit code: $QEMU_EXIT_CODE ==="
        
        if [ -f qemu_debug.log ]; then
          echo "=== Final QEMU log (last 50 lines) ==="
          tail -50 qemu_debug.log
        fi
        
        if [ $QEMU_EXIT_CODE -ne 0 ]; then
          echo "QEMU preparation failed with exit code $QEMU_EXIT_CODE"
          exit $QEMU_EXIT_CODE
        fi
        
      timeout-minutes: 130

    - name: Run functional tests
      working-directory: tests/functional
      run: |
        export YANET_TEST_DEBUG=1
        make test || tail -n 100 test.log
      timeout-minutes: 35

    - name: Upload functional test logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: functional-test-logs
        path: |
          tests/functional/test.log
