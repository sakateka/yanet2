syntax = "proto3";

package forwardpb;

import "common/proto/target.proto";

option go_package = "github.com/yanet-platform/yanet2/modules/forward/controlplane/forwardpb;forwardpb";

// ForwardService is a controlplane service for forwarding module.
service ForwardService {
	// ListConfigs returns all forward module configurations of all
	// dataplane instances.
	rpc ListConfigs(ListConfigsRequest) returns (ListConfigsResponse);

	// ShowConfig returns the current configuration for the forward module.
	rpc ShowConfig(ShowConfigRequest) returns (ShowConfigResponse);

	// EnableL2Forward enables Layer 2 forwarding between devices.
	rpc EnableL2Forward(L2ForwardEnableRequest)
		returns (L2ForwardEnableResponse);

	// AddL3Forward adds a Layer 3 forwarding rule to the configuration.
	rpc AddL3Forward(AddL3ForwardRequest) returns (AddL3ForwardResponse);

	// RemoveL3Forward removes a Layer 3 forwarding rule from the
	// configuration.
	rpc RemoveL3Forward(RemoveL3ForwardRequest)
		returns (RemoveL3ForwardResponse);

	// Allows to delete forward config if it is not referenced
	// by any pipeline.
	rpc DeleteConfig(DeleteConfigRequest) returns (DeleteConfigResponse);
}

message L3ForwardEntry {
	string network = 1;
	string dst_dev_id = 2;
}

message ForwardDeviceConfig {
	string src_dev_id = 1;
	string dst_dev_id = 2;
	repeated L3ForwardEntry forwards = 3;
}

message Config {
	repeated ForwardDeviceConfig devices = 1;
}

// Represents config names of dataplane instances
message InstanceConfigs {
	// Dataplane instance
	uint32 instance = 1;
	repeated string configs = 2;
}

message ListConfigsRequest {
}

// ListConfigsResponse contains existing configurations per dataplane instance.
message ListConfigsResponse {
	repeated InstanceConfigs instance_configs = 1;
}

// ShowConfigResponse retrieves the runtime configuration for the forward
// module.
message ShowConfigRequest {
	commonpb.TargetModule target = 1;
}

// ShowConfigResponse contains the configuration details of the forward module.
message ShowConfigResponse {
	uint32 instance = 1;
	Config config = 2;
}

// L2ForwardEnableRequest enables Layer 2 forwarding between specified devices.
message L2ForwardEnableRequest {
	commonpb.TargetModule target = 1;
	string src_dev_id = 2;
	string dst_dev_id = 3;
}

message L2ForwardEnableResponse {
}

// AddL3ForwardRequest specifies the target module to which a forward rule
// should be added for the device identified by the device ID. If an existing
// forward rule is present, it will be replaced.
message AddL3ForwardRequest {
	commonpb.TargetModule target = 1;
	string src_dev_id = 2;
	L3ForwardEntry forward = 3;
}

message AddL3ForwardResponse {
}

// RemoveL3ForwardRequest specifies the device ID within the target module
// from which to remove the forward entry for the specified network.
message RemoveL3ForwardRequest {
	commonpb.TargetModule target = 1;
	string src_dev_id = 2;
	string network = 3;
}

message RemoveL3ForwardResponse {
}

// Delete config with specified name.
message DeleteConfigRequest {
	// Specifies module name and
	// dataplane instance of forward agent to delete.
	commonpb.TargetModule target = 1;
}

message DeleteConfigResponse {
	bool deleted = 1;
}
