syntax = "proto3";

package nat64pb;

import "common/proto/target.proto";

option go_package = "github.com/yanet-platform/yanet2/modules/nat64/controlplane/nat64pb;nat64pb";

// NAT64Service is a control-plane service for managing NAT64 module
service NAT64Service {
	rpc ListConfigs(ListConfigsRequest) returns (ListConfigsResponse) {
	}

	// ShowConfig returns the current configuration of the NAT64 module
	rpc ShowConfig(ShowConfigRequest) returns (ShowConfigResponse) {
	}

	// AddPrefix adds a new NAT64 prefix to the configuration
	rpc AddPrefix(AddPrefixRequest) returns (AddPrefixResponse) {
	}

	// RemovePrefix removes a NAT64 prefix from the configuration
	rpc RemovePrefix(RemovePrefixRequest) returns (RemovePrefixResponse) {
	}

	// AddMapping adds a new IPv4-IPv6 address mapping
	rpc AddMapping(AddMappingRequest) returns (AddMappingResponse) {
	}

	// RemoveMapping removes an IPv4-IPv6 address mapping
	rpc RemoveMapping(RemoveMappingRequest)
		returns (RemoveMappingResponse) {
	}

	// SetMTU sets MTU values for IPv4/IPv6
	rpc SetMTU(SetMTURequest) returns (SetMTUResponse) {
	}

	// SetDropUnknown sets drop_unknown_prefix and drop_unknown_mapping
	// flags
	rpc SetDropUnknown(SetDropUnknownRequest)
		returns (SetDropUnknownResponse) {
	}
}

// Represents config names of dataplane instances
message InstanceConfigs {
	// Dataplane instance
	uint32 instance = 1;
	repeated string configs = 2;
}

message ListConfigsRequest {
}

// ListConfigsResponse contains existing configurations per dataplane instance.
message ListConfigsResponse {
	repeated InstanceConfigs instance_configs = 1;
}

// ShowConfigRequest requests the current configuration
message ShowConfigRequest {
	commonpb.TargetModule target = 1;
}

// MTUConfig contains MTU configuration values
message MTUConfig {
	uint32 ipv4_mtu = 1; // MTU value for IPv4
	uint32 ipv6_mtu = 2; // MTU value for IPv6
}

// Prefix represents a NAT64 prefix
message Prefix {
	bytes prefix = 1; // 12-byte IPv6 prefix
}

// Mapping represents an IPv4-IPv6 address mapping
message Mapping {
	bytes ipv4 = 1;		 // IPv4 address in network byte order
	bytes ipv6 = 2;		 // IPv6 address (16 bytes)
	uint32 prefix_index = 3; // Index of the used prefix
}

// Config represents configuration for a single dataplane instance
message Config {
	repeated Prefix prefixes = 1;
	repeated Mapping mappings = 2;
	MTUConfig mtu = 3;
	bool drop_unknown_prefix = 4;  // Drop packets with unknown prefix
	bool drop_unknown_mapping = 5; // Drop packets with unknown mapping
}

// ShowConfigResponse contains the current configuration
message ShowConfigResponse {
	uint32 instance = 1;
	Config config = 2;
}

// AddPrefixRequest specifies a prefix to add
message AddPrefixRequest {
	commonpb.TargetModule target = 1;
	bytes prefix = 2; // 12-byte IPv6 prefix
}

message AddPrefixResponse {
}

// RemovePrefixRequest specifies a prefix to remove
message RemovePrefixRequest {
	commonpb.TargetModule target = 1;
	bytes prefix = 2; // 12-byte IPv6 prefix
}

message RemovePrefixResponse {
}

// AddMappingRequest specifies an IPv4-IPv6 mapping to add
message AddMappingRequest {
	commonpb.TargetModule target = 1;
	bytes ipv4 = 2;		 // IPv4 address in network byte order
	bytes ipv6 = 3;		 // IPv6 address (16 bytes)
	uint32 prefix_index = 4; // Index of the used prefix
}

message AddMappingResponse {
}

// RemoveMappingRequest specifies an IPv4-IPv6 mapping to remove
message RemoveMappingRequest {
	commonpb.TargetModule target = 1;
	bytes ipv4 = 2; // IPv4 address to remove mapping for
}

message RemoveMappingResponse {
}

// SetMTURequest specifies MTU values to set
message SetMTURequest {
	commonpb.TargetModule target = 1;
	MTUConfig mtu = 2;
}

message SetMTUResponse {
}

// SetDropUnknownRequest specifies drop_unknown flags to set
message SetDropUnknownRequest {
	commonpb.TargetModule target = 1;
	bool drop_unknown_prefix = 2;  // Drop packets with unknown prefix
	bool drop_unknown_mapping = 3; // Drop packets with unknown mapping
}

message SetDropUnknownResponse {
}
