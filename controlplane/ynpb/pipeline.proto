syntax = "proto3";

package ynpb;

option go_package = "github.com/yanet-platform/yanet2/controlplane/ynpb;ynpb";

// TODO: docs.
service PipelineService {
	// TODO: docs.
	rpc Update(UpdatePipelinesRequest) returns (UpdatePipelinesResponse) {
	}

	// TODO: Assign (assign pipeline to device id).
	rpc Assign(AssignPipelinesRequest) returns (AssignPipelinesResponse) {
	}

	// Allows to delete pipeline with specified name
	// if it is not assigned to device.
	rpc Delete(DeletePipelineRequest) returns (DeletePipelineResponse);
}

// TODO: docs.
message UpdatePipelinesRequest {
	// Dataplane instance
	uint32 instance = 1;
	// TODO: docs.
	repeated Pipeline pipelines = 2;
}

// A pipeline chain.
message Pipeline {
	// Name of the pipeline.
	//
	// This name is used to identify the pipeline in the controlplane.
	string name = 1;
	// Nodes in the pipeline chain.
	//
	// The nodes are executed in order.
	repeated string functions = 2;
}

// TODO: docs.
message UpdatePipelinesResponse {
}

message AssignPipelinesRequest {
	// Dataplane instance to assign the pipelines to.
	uint32 instance = 1;
	// Devices to assign the pipelines to.
	//
	// Each device can have several pipelines assigned to it, which is
	// described in the DevicePipelines message, since protobuf map values
	// are not allowed to be repeated.
	map<string, DevicePipelines> devices = 2;
}

message DevicePipelines {
	// Pipelines to assign to the device.
	repeated DevicePipeline pipelines = 1;
}

message DevicePipeline {
	// Name of the pipeline to assign to the device.
	string pipeline_name = 1;
	// Weight of the pipeline to assign to the device.
	//
	// More weight means more traffic will be sent to the pipeline. Zero
	// weight means the pipeline will not be used at all.
	uint64 pipeline_weight = 2;
}

message AssignPipelinesResponse {
}

message DeletePipelineRequest {
	// Dataplane instance
	uint32 instance = 1;

	// Name of the pipeline
	string pipeline_name = 2;
}

message DeletePipelineResponse {
}
